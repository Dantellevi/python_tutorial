"""Одними из самых базовых графических команд являются команды, отображающие текст. Самой простой такой командой, не привязаной к какому-либо объекту вроде координатной оси или делений координатной оси, является команда plt.text().

В качестве входящих данных она принимает координаты положения будующей строки и сам текст в виде строки. По умолчанию координаты положения строки будут приурочены к области изменения данных. Можно задать положение текста в относительных координатах (см. пример ниже), когда вся область рисования изменяется по обеим координатным осям от 0 до 1 включительно. Таким образом, координата (0.5, 0.5) в относительных координатах означает центр области рисования. Текст можно выровнять с помощью параметров horizontalalignment и verticalalignment, а также заключать его в рамку с цветным фоном, передав параметр bbox. Bbox - это словарь, работающий со свойствами прямоугольника, то есть объектом Rectangle.

Помимо метода text() существуют и другие методы отображения текста в pyplot. Ниже представлен список текстовых команд в pyplot, в квадратных скобках указан альтернативный синтаксис вызова аналогичных команд в ООП стиле. Подробнее об ООП стиле будет рассказано позже.

plt.xlabel() - добавляет подпись оси абсции OX [matplotlib.axes.Axes.set_xlabel()];

plt.ylabel() - добавляет подпись оси ординат OY [matplotlib.axes.Axes.set_ylabel()];

plt.title() - добавляет заголовок для области рисования Axes [matplotlib.axes.Axes.set_title()];

plt.figtext() - добавляет текст на рисунок Figure [matplotlib.figure.Figure.text()];

plt.suptitle() - добавляет заголовок для рисунка Figure [matplotlib.figure.Figure.suptitle()];

plt.annotate() - добавляет примечание, которое состоит из текста и необязательной стрелки в указанную область на рисунке [matplotlib.axes.Axes.annotate()]


"""


import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np


a=1
x=np.arange(-2*np.pi,2*np.pi,0.05)

#Уравление кардиоиды
xz=a*(2*np.cos(x) - np.cos(2*x))
yz = a*(2*np.sin(x) - np.sin(2*x))

fig=plt.figure()            #создание полотна
plt.plot(xz,yz)             #выводим данные на полотно

# Текст в координатах данных
str1 = plt.text(-np.pi/2., np.pi/2., 'Текст в координатах данных', fontsize=14)   # выравнивание по левому краю
print('Text class: %s' % str1.__class__)

# Текст в рамке
plt.text(0.5, 0.5, 'Текст в рамке', fontsize=14,
         # выравнивание по вертикали и по горизонтали по центру
         horizontalalignment='center', verticalalignment='center',
         bbox=dict(facecolor='pink', alpha=0.5))

#Текст в относительных координатах области рисования ах
ax=fig.add_subplot(111)     #создаем область рисования ах
plt.text(0.5,0.5,'Текст в относительных координатах', fontsize=14,
         horizontalalignment='right', verticalalignment='center',
         transform=ax.transAxes)

plt.grid()
plt.show()

