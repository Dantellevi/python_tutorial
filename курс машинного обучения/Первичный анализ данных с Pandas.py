import pandas as ps
import numpy as np
"""
Будем показывать основные методы в деле, 
анализируя набор данных по оттоку клиентов 
телеком-оператора
"""

#=================================================================================
df=ps.read_csv('telecom_churn.csv') #читаем данные из файла
#=================================================================================
print('----------------------Получаем первые признаки(столбцы) из данных-----------------------')

print(df.head())       #посмотрим на первые 5 строк
print('----------------------------------------------------------------------------------------------')
#=================================================================================
"""
Каждая строка представляет собой одного клиента – это объект исследования.
Столбцы – признаки объекта.

Название	Описание	Тип
State	Буквенный код штата	номинальный
Account length	Как долго клиент обслуживается компанией	количественный
Area code	Префикс номера телефона	количественный
International plan	Международный роуминг (подключен/не подключен)	бинарный
Voice mail plan	Голосовая почта (подключена/не подключена)	бинарный
Number vmail messages	Количество голосовых сообщений	количественный
Total day minutes	Общая длительность разговоров днем	количественный
Total day calls	Общее количество звонков днем	количественный
Total day charge	Общая сумма оплаты за услуги днем	количественный
Total eve minutes	Общая длительность разговоров вечером	количественный
Total eve calls	Общее количество звонков вечером	количественный
Total eve charge	Общая сумма оплаты за услуги вечером	количественный
Total night minutes	Общая длительность разговоров ночью	количественный
Total night calls	Общее количество звонков ночью	количественный
Total night charge	Общая сумма оплаты за услуги ночью	количественный
Total intl minutes	Общая длительность международных разговоров	количественный
Total intl calls	Общее количество международных разговоров	количественный
Total intl charge	Общая сумма оплаты за международные разговоры	количественный
Customer service calls	Число обращений в сервисный центр	количественный




Целевая переменная: Churn – Признак оттока, бинарный признак (1 – потеря клиента, то есть отток).
 Потом мы будем строить модели, прогнозирующие этот признак по остальным, поэтому мы и назвали его целевым.
"""
#=================================================================================================================
print('----------------------Получаем размер и общую информацию о данных-----------------------')
print(df.shape)         #размер данных, названия признаков и их типы

print(df.info())                #Общая информация по датафрейму

print('--------------------------------------------------------------------------------------------')

#====================================================================================================================
"""
Изменить тип колонки можно с помощью метода astype. Применим этот метод к признаку Churn и переведём его в int64:
"""
print('--------------------------------Изменяет тип данных в колонке Churn--------------------------------')
df['Churn'] = df['Churn'].astype('int64')       #переводим занчения из столбца churn  в целочисленное значение

print('-----------------------------------------------------------------------------------------------------')
#-----------------------------------------------------------------------------------------------------------------------
"""
Метод describe показывает основные статистические характеристики
 данных по каждому числовому признаку (типы int64 и float64): 
 число непропущенных значений, среднее, стандартное 
 отклонение, диапазон, медиану, 0.25 и 0.75 квартили.
"""
print('-----------------------------показывает основные статистические характеристики данных по каждому числовому признаку----------------')

print(df.describe())

print('---------------------------------------------------------------------------------------------------------')
#-----------------------------------------------------------------------------------------------------------------------
"""
Чтобы посмотреть статистику по нечисловым признакам, нужно явно указать интересующие нас типы в параметре include.
"""

print('-----------------------------------------Информацию по нечисловым признакам данных---------------------------')
print(df.describe(include=['object', 'bool']))

print('-----------------------------------------------------------------------------------------------------------------')
#--------------------------------------------------------------------------------------------------------------------------
"""
Для категориальных (тип object) и булевых (тип bool) признаков можно 
воспользоваться методом value_counts. 
Посмотрим на распределение данных по нашей целевой переменной — Churn:
"""
print('-------------------------Распределение данных в целевой колонке-Churn-отток клиентов')
print(df['Churn'].value_counts())

print('------------------------------------------------------------------------------------------------------------')
#------------------------------------------------------------------------------------------------------------------------
"""
Посмотрим на распределение пользователей по переменной Area code. 
Укажем значение параметра normalize=True, чтобы посмотреть не абсолютные частоты, а относительные.
"""
print('----------------------------------Распределение пользователей индексы номеров телефона----------------')
print(df['Area code'].value_counts(normalize=True))
print('-------------------------------------------------------------------------------------------------------')

#=========================================================Сортировка==========================================================================
"""
DataFrame можно отсортировать по значению какого-нибудь из признаков. 
В нашем случае, например, по Total day charge 
(ascending=False для сортировки по убыванию):
"""
print('----------------------------------Сортируем данные по Общай сумме оплаты за услуги днем------------------------')
print(df.sort_values(by='Total day charge',
        ascending=False).head())
print('-------------------------------------------------------------------------------------------------------')

#-----------------------------------------------------------------------------------------------------------------------
#===================================Сортировать можно и по группе столбцов:
print('----------------------------------Сортируем данные по группе столпцов отток , и общее количество дней------------------------')
print(df.sort_values(by=['Churn', 'Total day charge'],
        ascending=[True, False]).head())
print('-------------------------------------------------------------------------------------------------------')
#-----------------------------------------------------------------------------------------------------------------------

#===============================================Индексация и извлечение данных===================================================================

