"""

cv2.bilateralFilter () очень эффективен при удалении
шума при сохранении краев.
Но операция медленнее по сравнению с другими фильтрами.
Мы уже видели, что гауссовский фильтр принимает
окрестность вокруг пикселя и находит его гауссовое
средневзвешенное значение. Этот гауссовский фильтр
является функцией только пространства, т. Е. При
фильтрации используются соседние пиксели. Он не
учитывает, имеют ли пиксели почти такую ​​же
интенсивность. Он не учитывает, является ли пиксель
пикселем края или нет. Поэтому он также размывает края,
которые мы не хотим делать.

Двусторонний фильтр также принимает гауссовский фильтр
в пространстве, но еще один гауссовский фильтр,
который является функцией разности пикселей. Гауссовская
функция пространства гарантирует, что для размытия
учитываются только близлежащие пиксели, в то время как
гауссовая функция разности интенсивностей гарантирует,
что для размытия считаются только пиксели с одинаковой
интенсивностью для центрального пикселя. Таким образом,
он сохраняет края, поскольку пиксели на краях будут иметь
большую вариацию интенсивности.


Ниже приведены примеры использования двустороннего фильтра (подробнее о аргументах см. В документах).

"""



import cv2
import numpy as np
from matplotlib import pyplot as plt


img=cv2.imread('image2.JPG') #считываем изображения
blur= cv2.bilateralFilter(img, 9,75,75)       #производим размытие изображения

#=====================Производим вывод изображения=========
plt.subplot(121),plt.imshow(img),plt.title('Original')
plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(blur),plt.title('Bilateral Filtering')
plt.xticks([]), plt.yticks([])
plt.show()
#==========================================================

